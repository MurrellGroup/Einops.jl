var documenterSearchIndex = {"docs":
[{"location":"#Einops","page":"Home","title":"Einops","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Einops.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#Einops.pack-Union{Tuple{N}, Tuple{Any, NTuple{N, Union{typeof(*), Symbol}}}} where N","page":"Home","title":"Einops.pack","text":"pack(unpacked_arrays, pattern)\n\nPack a vector of arrays into a single array according to the pattern.\n\nExamples\n\n```jldoctest julia> inputs = [rand(2,3,5), rand(2,3,7,5), rand(2,3,7,9,5)]\n\njulia> packedarray, packedshapes = pack(inputs, (:i, :j, *, :k));\n\njulia> size(packed_array) (2, 3, 71, 5)\n\njulia> packed_shapes 3-element Vector{NTuple{N, Int64} where N}:  ()  (7,)  (7, 9)\n\n\n\n\n\n","category":"method"},{"location":"#Einops.rearrange-Tuple{Any, Any}","page":"Home","title":"Einops.rearrange","text":"rearrange(x::AbstractArray, left --> right)\n\nRearrange the axes of x according to the pattern specified by left --> right.\n\nCan always be expressed as a reshape + permutedims + reshape.\n\nExamples\n\njulia> rearrange(rand(2,3,5), (:a, :b, :c) --> (:c, :b, :a)) |> size\n(5, 3, 2)\n\njulia> permutedims(rand(2,3,5), (3,2,1)) |> size\n(5, 3, 2)\n\njulia> rearrange(rand(2,3,35), (:a, :b, (:c, :d)) --> (:a, :d, (:c, :b)), c=5) |> size\n(2, 7, 15)\n\njulia> reshape(permutedims(reshape(rand(2,3,35), 2,3,5,7), (1,4,3,2)), 2,7,5*3) |> size\n(2, 7, 15)\n\n\n\n\n\n","category":"method"},{"location":"#Einops.unpack-Union{Tuple{N}, Tuple{AbstractArray{<:Any, N}, Any, NTuple{N, Union{typeof(*), Symbol}}}} where N","page":"Home","title":"Einops.unpack","text":"unpack(packed_array, packed_shapes, pattern)\n\nUnpack a single array into a vector of arrays according to the pattern.\n\nExamples\n\njulia> inputs = [rand(2,3,5), rand(2,3,7,5), rand(2,3,7,9,5)];\n\njulia> inputs == unpack(pack(inputs, (:i, :j, *, :k))..., (:i, :j, *, :k))\ntrue\n\njulia> packed_array = rand(2,3,16);\n\njulia> packed_shapes = [(), (7,), (4, 2)];\n\njulia> unpack(packed_array, packed_shapes, (:i, :j, *)) .|> size\n3-element Vector{Tuple{Int64, Int64, Vararg{Int64}}}:\n (2, 3)\n (2, 3, 7)\n (2, 3, 4, 2)\n\n\n\n\n\n","category":"method"},{"location":"#Einops.@einops_str-Tuple{Any}","page":"Home","title":"Einops.@einops_str","text":"einops\"a (b c) -> (c b a)\"\neinops\"i j * k\"\n\nFor parity with Python implementation.\n\nExamples\n\njulia> einops\"a 1 b c -> (c b) a\"\n(:a, 1, :b, :c) --> ((:c, :b), :a)\n\njulia> einops\"embed token (head batch) -> (embed head) token batch\"\n(:embed, :token, (:head, :batch)) --> ((:embed, :head), :token, :batch)\n\njulia> einops\"i j * k\" # for packing\n(:i, :j, *, :k)\n\n\n\n\n\n","category":"macro"}]
}
